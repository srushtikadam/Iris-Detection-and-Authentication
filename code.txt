Image reading: 
import os 
import cv2 
################ PARAMETERS ######################## 
path = 'train' 
#################################################### 
#### IMPORTING DATA/IMAGES FROM FOLDERS  
count = 0 
images = []     # LIST CONTAINING ALL THE IMAGES  
classNo = []    # LIST CONTAINING ALL THE CORRESPONDING CLASS ID OF IMAGES  
myList = os.listdir(path) 
print("Total Classes Detected:",len(myList)) 
noOfClasses = len(myList) 
print("Importing Classes .......") 
for x in range (0,noOfClasses): 
    myPicList = os.listdir(path+"/"+str(x)) 
    for y in myPicList: 
        curImg = cv2.imread(path+"/"+str(x)+"/"+y) 
        curImg = cv2.resize(curImg,(32,32)) 
 
        images.append(curImg) 
        classNo.append(x) 
    print(x,end= " ") 
print(" ") 
print("Total Images in Images List = ",len(images)) 
print("Total IDS in classNo List= ",len(classNo)) 

Pre-processing: 
import cv2 
import matplotlib.pyplot as plt 
import numpy as np 
def preprocess(img): 
    img = cv2.imread(rf'{img}') 
    kernel = np.array([[0, -1, 0], 
                  [-1, 5.1, -1], 
                  [0, -1, 0]]) 
    img_sharpened = cv2.filter2D(img,-1,kernel) 
    return img_sharpened 
Pre-Processing GUI interface: 
from tkinter import * 
import tkinter.filedialog 
import tkinter.messagebox as tmsg 
from PIL import Image 
from PIL import ImageTk 
import cv2 
from preprocessing import preprocess 
def print_path(): 
    global f 
    f = tkinter.filedialog.askopenfilename( 
        parent=root, 
        initialdir='', 
        title='Select file', 
        filetypes=[('bmp image', '.bmp')] 
    ) 
    img1 = cv2.imread(f) 
    newimg = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) 
    cv2.putText(newimg,'Original',(5,25),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0),1) 
    img = Image.fromarray(newimg) 
    imgtk = ImageTk.PhotoImage(image=img) 
    x.imgtk = imgtk 
    x.configure(image=imgtk) 
def process(): 
    img_processed = preprocess(rf'{f}')     
 
cv2.putText(img_processed,'Preprocessed',(5,25),cv2.FONT_HERSHEY_SIMPLEX,1,(255,0,0)
 ,1) 
    img = Image.fromarray(img_processed) 
    imgtk = ImageTk.PhotoImage(image=img) 
    y.imgtk = imgtk 
    y.configure(image=imgtk) 
root = Tk() 
root.geometry("800x500") 
root.title("Image Preprocessing") 
root.resizable(0, 0) 
MF = Frame(root, bd=8, bg="lightgray", relief=GROOVE) 
MF.place(x=0, y=0, height=50, width=800) 
menu_label = Label(MF, text="Image Preprocessing", font=("times new roman", 20, "bold"), 
bg="lightgray", fg="black", pady=0) 
menu_label.pack(side=TOP, fill="x") 
# Create a frame for buttons 
button_frame = Frame(root) 
button_frame.grid(row=1, column=0, pady=10) 
# "Select Image" button 
b1 = Button(button_frame, font=("times new roman", 20, "bold"), text='Select Image', 
command=print_path) 
b1.grid(row=0, column=0, padx=10) 

# "Preprocess" button 
b2 = Button(button_frame, font=("times new roman", 20, "bold"), text='Preprocess', 
command=process) 
b2.grid(row=0, column=1, padx=10) 
# Create a frame for displaying images 
image_frame = Frame(root) 
image_frame.grid(row=0, column=0, padx=50, pady=50) 
x = Label(image_frame, image=None) 
x.grid(row=0, column=0, padx=10) 
y = Label(image_frame, image=None) 
y.grid(row=0, column=1, padx=10) 
root.mainloop() 

Segmentation: 
import matplotlib.pyplot as plt 
from skimage.color import rgb2gray 
from skimage import data, img_as_float 
from skimage.segmentation import chan_vese 
from skimage import io, color, filters, feature, morphology 
def segmentation(img): 
    img = io.imread(rf'{img}') 
    img_gray = rgb2gray(img) 
    chanvese_gray_astronaut = chan_vese(img_gray, 
                                    max_num_iter=65, 
                                    extended_output=True) 
    return chanvese_gray_astronaut[1] 
Segmentation GUI interface: 
from tkinter import * 
import tkinter.filedialog 
import tkinter.messagebox as tmsg 
from PIL import Image 
from PIL import ImageTk 
import cv2 
import numpy as np 
from segmentation import segmentation 
def print_path(): 
    global f 
    f = tkinter.filedialog.askopenfilename( 
        parent=root, 
        initialdir='', 
        title='Select file', 
        filetypes=[('bmp image', '.bmp')] 
    ) 

    img1 = cv2.imread(f) 
    newimg = cv2.cvtColor(img1, cv2.COLOR_BGR2RGB) 
    img = Image.fromarray(newimg) 
    imgtk = ImageTk.PhotoImage(image=img) 
    x.imgtk = imgtk 
    x.configure(image=imgtk) 
def process(): 
    img_segmented = segmentation(rf'{f}') 
    img_segmented = ((img_segmented - img_segmented.min()) / (img_segmented.max() - 
img_segmented.min()) * 255).astype(np.uint8) 
    img = Image.fromarray(cv2.cvtColor(img_segmented, cv2.COLOR_BGR2RGB)) 
    imgtk = ImageTk.PhotoImage(image=img) 
    y.imgtk = imgtk 
    y.configure(image=imgtk) 
root = Tk() 
root.geometry("800x500") 
root.title("Image Segmentation") 
root.resizable(0, 0) 
MF = Frame(root, bd=8, bg="lightgray", relief=GROOVE) 
MF.place(x=0, y=0, height=50, width=800) 
menu_label = Label(MF, text="Image Segmentation", font=("times new roman", 20, "bold"), 
bg="lightgray", fg="black", pady=0) 
menu_label.pack(side=TOP, fill="x") 

# Create a frame for buttons 
button_frame = Frame(root) 
button_frame.grid(row=1, column=0, pady=10) 
# "Select Image" button 
b1 = Button(button_frame, font=("times new roman", 20, "bold"), text='Select Image', 
command=print_path) 
b1.grid(row=0, column=0, padx=10) 
# "Preprocess" button 
b2 = Button(button_frame, font=("times new roman", 20, "bold"), text='Segment', 
command=process) 
b2.grid(row=0, column=1, padx=10) 
# Create a frame for displaying images 
image_frame = Frame(root) 
image_frame.grid(row=0, column=0, padx=50, pady=50) 
x = Label(image_frame, image=None) 
x.grid(row=0, column=0, padx=10) 
y = Label(image_frame, image=None) 
y.grid(row=0, column=1, padx=10) 
root.mainloop() 
Pre-Processing Training: 
from glob import glob 
import cv2 
import os 
import Augmentor 
def preprocess(path): 
    input_image_paths = glob(path + '/*/*.jpg') 
    output_directories = ['Preprocessed\\' + '\\'.join(path.split('\\')[1:-1]) for path in 
input_image_paths] 
for img_path, output_dir in zip(input_image_paths, output_directories): 
        image = cv2.imread(img_path,0) 
        new_img = cv2.convertScaleAbs(image, alpha=1.2, beta=10) 
        blurred_img = cv2.GaussianBlur(new_img, (0, 0), 3) 
        img_sharpened = cv2.addWeighted(new_img, 1.7, blurred_img, -0.9, 0) 
        os.makedirs(output_dir, exist_ok=True) 
        img_filename = img_path.split('\\')[-1] 
        final_path = os.path.join(output_dir, img_filename) 
        cv2.imwrite(final_path, img_sharpened) 
def augmentation(path): 
    img_classes = glob(path+ '*/*') 
    for cls in img_classes: 
        input_folder = rf"{cls}"  
        p = Augmentor.Pipeline(input_folder, output_directory='.') 
        p.rotate(probability=0.7, max_left_rotation=5, max_right_rotation=5) 
        num_samples = 100 
        p.sample(num_samples) 
        p.process() 
preprocess('data') 
augmentation('Preprocessed') 